for( c1 = 0; c1 <= floord(N - 2, 8); c1 += 1)
  #pragma omp parallel for
  for( c3 = max(0, c1 - (N + 15) / 16 + 1); c3 <= c1 / 2; c3 += 1)
    for( c4 = 0; c4 <= 1; c4 += 1) {
      if (c4 == 1) {
        for( c7 = max(-N + 16 * c1 - 16 * c3 + 1, -N + 16 * c3 + 2); c7 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c7 += 1)
          for( c9 = 16 * c3 - c7 + 1; c9 <= min(N - 1, 16 * c3 - c7 + 16); c9 += 1)
            for( c10 = max(0, 16 * c3 - c7 - c9 + 2); c10 <= 1; c10 += 1) {
              if (c10 == 1) {
                S[(-c7)][c9] = MAX(S[(-c7)][c9], S[(-c7)+1][c9-1]) + MAX((-c7),c9);
              } else {
                if (N + 16 * c3 + c7 >= 16 * c1 + 2)
                  for( c11 = 0; c11 <= 16 * c3; c11 += 1)
                    S[(-c7)][c9] = MAX(S[(-c7)][c11+(-c7)] + S[c11+(-c7)+1][c9], S[(-c7)][c9]);
                for( c11 = 16 * c3 + 1; c11 < c7 + c9; c11 += 1)
                  S[(-c7)][c9] = MAX(S[(-c7)][c11+(-c7)] + S[c11+(-c7)+1][c9], S[(-c7)][c9]);
              }
            }
      } else {
        for( c5 = 0; c5 <= c3; c5 += 1)
          for( c7 = max(-N + 16 * c1 - 16 * c3 + 1, -N + 15 * c1 - 14 * c3 + 2); c7 <= min(0, -N + 16 * c1 - 16 * c3 + 16); c7 += 1) {
            if (N + 16 * c3 + c7 >= 16 * c1 + 2) {
              for( c11 = 16 * c5; c11 <= min(16 * c3, 16 * c5 + 15); c11 += 1)
                S[(-c7)][(16*c3-c7+1)] = MAX(S[(-c7)][c11+(-c7)] + S[c11+(-c7)+1][(16*c3-c7+1)], S[(-c7)][(16*c3-c7+1)]);
            } else {
              for( c9 = N - 16 * c1 + 32 * c3; c9 <= N - 16 * c1 + 32 * c3 + 15; c9 += 1)
                for( c11 = 16 * c5; c11 <= min(16 * c3, 16 * c5 + 15); c11 += 1)
                  S[(N-16*c1+16*c3-1)][c9] = MAX(S[(N-16*c1+16*c3-1)][c11+(N-16*c1+16*c3-1)] + S[c11+(N-16*c1+16*c3-1)+1][c9], S[(N-16*c1+16*c3-1)][c9]);
            }
          }
      }
    }

