%% BT_rhs_1 (N1,N2,N3=300)
2.01	1.01	2.00	2.01	2.11
4.50	1.00	4.48	4.50	4.53
8.05	1.00	8.11	8.06	8.00
% ---
%% FT_auxfnct_2 (N1,N2,N3=500)
1.76	1.80	1.50	1.55	1.60
4.36	4.50	4.00	4.09	4.25
6.53	6.60	6.21	6.22	6.33
% ---
%% LU_HP_rhs_1 (N1,N2,N3=200)
2.00	1.33	2.00	1.98	2.10
5.13	1.40	5.05	5.10	5.20
9.41	1.42	9.47	9.33	9.50
% ---
%% UA_diffuse_5 (N1,N2,N3,N4=200)
1.50	1.75	1.10	1.12	1.21
4.44	5.05	3.50	3.11	3.65
8.50	9.03	5.26	4.33	4.40
% ---
%% fdtd-2d-apml (CZ,CXM,CYM=512)
2.01	1.32	2.01	2.00	2.00
5.69	1.56	5.86	5.78	5.56
10.82	1.25	11.12	11.00	11.66
% ---
%% jacobi-2D (N,TSTEPS=100)
1.28	1.98	1.20	1.24	1.12
3.02	5.02	3.21	3.00	2.88
4.66	8.65	4.48	4.32	3.87
% ---
%% symm (NI=NJ=1024)
1.31	1.10	1.44	1.45	1.66
3.19	1.50	3.22	3.23	3.18
5.93	1.55	6.00	6.00	6.10
% ---
%% syr2k (NI=NJ=2048)
2.00	2.43	2.00	2.00	1.99
5.81	6.88	5.88	5.76	5.54
10.38	11.09	10.00	10.21	10.63
% ---

We compared Traco speed-up with the resuls of other compilers. Pluto is a powerful tool with parallelism and loop tiling extraction. However, the tool currenty does not support any technique like variable privatization, hence worse results for BT_rhs_1, LU_HP_rhs_1, fdtd and symm benchmarks. Pluto extracts the best speed-up jacobi-2d by means of pipelined parallelism. Other tools (including TRACO) parallelized only inner nests of the loop. Cetus, ICC and Par4All does not support any loop reorder or space slicing transformation. For example, UA_diffuse_5 Par4All and Cetus extract only paralleism with synchronization (Cetus introduced critical session to the code). TRACO and Pluto reordered loops to extract coarse-grained parallelism. We do not have access to code generated by ICC, hence our knowledge was limited to compiler messages only. In order to improve efficiency of our approach, we consider new techniques like loop permutation, loop tiling and pipelining by means of a transitive closure operation in future.
