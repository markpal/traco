R := [N] -> { [i, j, k, _v1 = 10] -> [i', j' = i + j - i', 0, _v2 = 12] : 0 <= k < -i + j and i' >= -1 + i and i' >= 0 and -N + i + j < i' <= i; [i, j, k, _v1 = 10] -> [i' = i, j' = j, o2, _v2 = 10] : i >= 0 and j < N and k >= 0 and k < o2 < -i + j; [i, j, k, _v1 = 10] -> [i' = i, j', -i + j, _v2 = 10] : i >= 0 and 0 <= k < -i + j and j < j' < N; [i, j, k, _v1 = 10] -> [i', j' = j, -1 + i - i', _v2 = 10] : j < N and 0 <= k < -i + j and 0 <= i' < i; [i, j, k = 0, _v1 = 12] -> [i' = i, j', -i + j, _v2 = 10] : i >= 0 and j > i and j < j' < N; [i, j, k = 0, _v1 = 12] -> [i', j' = j, -1 + i - i', _v2 = 10] : i < j < N and 0 <= i' < i; [i, j, k = 0, _v1 = 12] -> [i' = -1 + i, j' = 1 + j, 0, _v2 = 12] : i > 0 and i < j <= -2 + N };
Rp1 := R^+;
Rp2 := [N] -> { [i, j, i2, 10] -> [i', j', o2, 10] : 0 <= i2 < -i + j and i' >= 0 and j < j' < N and ((0 <= o2 <= -2 + i - i') or (i' < i and i - i' <= o2 < -i' + j')); [i, j, i2, 10] -> [i', j' = j, 0, 12] : j < N and 0 <= i2 < -i + j and 0 <= i' <= i; [i, j, i2, 10] -> [i', j', 0, 12] : 0 <= i2 < -i + j and 0 <= i' <= i and j' < N and ((i' <= -2 + i and j' > j) or (i' >= -1 + i and j' >= i + j - i')); [i, j, i2 = 0, 12] -> [i', j' = j, o2, 10] : j < N and 0 <= i' < i and i - i' <= o2 < j - i'; [i, j, i2 = 0, 12] -> [i', j', o2, 10] : j > i and i' >= 0 and j' < N and ((j' >= j and 0 <= o2 < i - i') or (i' <= -2 + i and j' > j and i - i' <= o2 < -i' + j') or (-1 + i <= i' <= i and j - i' <= o2 < -i' + j')); [i, j, i2, 10] -> [i' = i, j' = j, o2, 10] : i >= 0 and j < N and i2 >= 0 and i2 < o2 < -i + j; [i, j, i2 = 0, 12] -> [i' = -1 + i, j', o2, 10] : i > 0 and j < j' < N and 0 < o2 <= -i + j; [i, j, i2, 10] -> [i' = i, j', o2, 10] : i >= 0 and 0 <= i2 < -i + j and j' < N and -i + j <= o2 < -i + j'; [i, j, i2, 10] -> [i', j' = j, o2, 10] : j < N and 0 <= i2 < -i + j and 0 <= i' < i and 0 <= o2 < j - i'; [i, j, i2, 10] -> [i', j', -1 + i - i', 10] : 0 <= i2 < -i + j and 0 <= i' < i and j <= j' < N; [i, j, i2 = 0, 12] -> [i', j', 0, 12] : j > i and 0 <= i' <= i and j' >= j and -i + j + i' < j' < N };
Rp1-Rp2;
Rp2-Rp1;
TRd := R - Rp2(R);
TRd-R;
R-TRd;

